/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class AppTest {
    @Test 
    public void testSmallerThan1() {
        assertEquals(App.toRomanNumeral(0), "");
        assertEquals(App.toRomanNumeral(-1), "");
    }
    @Test 
    public void test1to3() {
        assertEquals(App.toRomanNumeral(1), "I");
        assertEquals(App.toRomanNumeral(2), "II");
        assertEquals(App.toRomanNumeral(3), "III");
    }
    @Test 
    public void test4() {
        assertEquals(App.toRomanNumeral(4), "IV");
    }
    @Test 
    public void test5to8() {
        assertEquals(App.toRomanNumeral(5), "V");
        assertEquals(App.toRomanNumeral(6), "VI");
        assertEquals(App.toRomanNumeral(7), "VII");
        assertEquals(App.toRomanNumeral(8), "VIII");
    }
    @Test 
    public void test9() {
        assertEquals(App.toRomanNumeral(9), "IX");
    }
    @Test 
    public void test10() {
        assertEquals(App.toRomanNumeral(10), "X");
    }
    @Test 
    public void test11to13() {
        assertEquals(App.toRomanNumeral(11), "XI");
        assertEquals(App.toRomanNumeral(12), "XII");
        assertEquals(App.toRomanNumeral(13), "XIII");
    }
    @Test 
    public void test14() {
        assertEquals(App.toRomanNumeral(14), "XIV");
    }
    @Test 
    public void test15to18() {
        assertEquals(App.toRomanNumeral(15), "XV");
        assertEquals(App.toRomanNumeral(16), "XVI");
        assertEquals(App.toRomanNumeral(17), "XVII");
        assertEquals(App.toRomanNumeral(18), "XVIII");
    }
    @Test 
    public void test19to20() {
        assertEquals(App.toRomanNumeral(19), "XIX");
        assertEquals(App.toRomanNumeral(20), "XX");
    }
    @Test 
    public void test21to30() {
        assertEquals(App.toRomanNumeral(21), "XXI");
        assertEquals(App.toRomanNumeral(22), "XXII");
        assertEquals(App.toRomanNumeral(23), "XXIII");
        assertEquals(App.toRomanNumeral(24), "XXIV");
        assertEquals(App.toRomanNumeral(25), "XXV");
        assertEquals(App.toRomanNumeral(26), "XXVI");
        assertEquals(App.toRomanNumeral(27), "XXVII");
        assertEquals(App.toRomanNumeral(28), "XXVIII");
        assertEquals(App.toRomanNumeral(29), "XXIX");
        assertEquals(App.toRomanNumeral(30), "XXX");
    }
    @Test 
    public void test40To90() {
        assertEquals(App.toRomanNumeral(40), "XL");
        assertEquals(App.toRomanNumeral(50), "L");
        assertEquals(App.toRomanNumeral(60), "LX");
        assertEquals(App.toRomanNumeral(70), "LXX");
        assertEquals(App.toRomanNumeral(80), "LXXX");
        assertEquals(App.toRomanNumeral(90), "XC");
    }
    
    // Continuing Tests from 100 to 1000

    @Test 
    public void test100() {
        assertEquals(App.toRomanNumeral(100), "C");
    }

    @Test 
    public void test101to300() {
        assertEquals(App.toRomanNumeral(101), "CI");
        assertEquals(App.toRomanNumeral(150), "CL");
        assertEquals(App.toRomanNumeral(200), "CC");
        assertEquals(App.toRomanNumeral(250), "CCL");
        assertEquals(App.toRomanNumeral(299), "CCXCIX");
            // Add more as needed
    }

    @Test 
    public void test300to399() {
        assertEquals(App.toRomanNumeral(300), "CCC");
        assertEquals(App.toRomanNumeral(333), "CCCXXXIII");
        assertEquals(App.toRomanNumeral(399), "CCCXCIX");
    }

    @Test 
    public void test400() {
        assertEquals(App.toRomanNumeral(400), "CD");
    }

    @Test 
    public void test401to499() {
        assertEquals(App.toRomanNumeral(401), "CDI");
        assertEquals(App.toRomanNumeral(450), "CDL");
        assertEquals(App.toRomanNumeral(499), "CDXCIX");
    }

    @Test 
    public void test500to800() {
        assertEquals(App.toRomanNumeral(500), "D");
        assertEquals(App.toRomanNumeral(600), "DC");
        assertEquals(App.toRomanNumeral(700), "DCC");
        assertEquals(App.toRomanNumeral(800), "DCCC");
    }

    @Test 
    public void test900() {
        assertEquals(App.toRomanNumeral(900), "CM");
    }

    @Test 
    public void test901to999() {
        assertEquals(App.toRomanNumeral(901), "CMI");
        assertEquals(App.toRomanNumeral(950), "CML");
        assertEquals(App.toRomanNumeral(999), "CMXCIX");
    }

    @Test 
    public void test1000() {
        assertEquals("M", App.toRomanNumeral(1000));
    }

    @Test 
    public void test1001to1999() {
        assertEquals("MI", App.toRomanNumeral(1001));
        assertEquals("MII", App.toRomanNumeral(1002));
        assertEquals("MIV", App.toRomanNumeral(1004));
        assertEquals("ML", App.toRomanNumeral(1050));
        assertEquals("MCMXCIX", App.toRomanNumeral(1999));
    }

    @Test 
    public void test2000to2999() {
        assertEquals("MM", App.toRomanNumeral(2000));
        assertEquals("MMI", App.toRomanNumeral(2001));
        assertEquals("MMXXIII", App.toRomanNumeral(2023));
        assertEquals("MMCDXLIV", App.toRomanNumeral(2444));
        assertEquals("MMCMXCIX", App.toRomanNumeral(2999));
    }

    @Test 
    public void test3000to3999() {
        assertEquals("MMM", App.toRomanNumeral(3000));
        assertEquals("MMMI", App.toRomanNumeral(3001));
        assertEquals("MMMCMLXXXVIII", App.toRomanNumeral(3988));
        assertEquals("MMMCMXCIX", App.toRomanNumeral(3999));
    }

    // Random Tests to Ensure Comprehensive Coverage

    @Test
    public void testRandomNumbers() {
        // Below 1000
        assertEquals("XLIV", App.toRomanNumeral(44));
        assertEquals("LVIII", App.toRomanNumeral(58));
        assertEquals("XCIV", App.toRomanNumeral(94));
        assertEquals("CCCXCIX", App.toRomanNumeral(399));
        assertEquals("CDXLIV", App.toRomanNumeral(444));
        assertEquals("DCCLXXXIX", App.toRomanNumeral(789));
        assertEquals("CMXLIV", App.toRomanNumeral(944));
        assertEquals("CMXCIX", App.toRomanNumeral(999));
        
        // 1000 to 3999
        assertEquals("MI", App.toRomanNumeral(1001));
        assertEquals("MD", App.toRomanNumeral(1500));
        assertEquals("MMXXIII", App.toRomanNumeral(2023));
        assertEquals("MMMCDXLIV", App.toRomanNumeral(3444));
        assertEquals("MMMCMXCIX", App.toRomanNumeral(3999));
    }

    // Test for Numbers Greater Than 3999

    @Test 
    public void testNumbersAbove3999() {
        assertEquals("Number exceeds limit", App.toRomanNumeral(4000));
        assertEquals("Number exceeds limit", App.toRomanNumeral(5000));
        assertEquals("Number exceeds limit", App.toRomanNumeral(10000));
        assertEquals("Number exceeds limit", App.toRomanNumeral(3999 + 1));
        assertEquals("Number exceeds limit", App.toRomanNumeral(Integer.MAX_VALUE));
    }
}
