/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Arrays;

class AppTest {

    @Test
    void testArr2Str()
    {
        int[] testArr1 = {1, 2, 3, 4, 5};
        assertEquals("[1, 2, 3, 4, 5]", App.convertArrayToString(testArr1));
        int[] testArr2 = {};
        assertEquals("[]", App.convertArrayToString(testArr2));
    }

    @Test
    void testCountSequences()
    {
        int[] testArr1 = {1, 2, 3, 4, 5};
        assertEquals(5, App.countSequences(testArr1));
        int[] testArr2 = {};
        assertEquals(0, App.countSequences(testArr2));
    }

    @Test
    void testEncodeRunLength()
    {
        // Test with single element array
        int[] testArr1 = {7};
        String testArr1Result = "[7] becomes [7, 1]";
        assertEquals(testArr1Result, App.encodeRunLength(testArr1));
        
        // Test with no elements (empty array)
        int[] testArr2 = {};
        String testArr2Result = "[] becomes []";
        assertEquals(testArr2Result, App.encodeRunLength(testArr2));

        // Test with all elements being the same (run-length encoding applies)
        int[] testArr3 = {3, 3, 3, 3, 3};
        String testArr3Result = "[3, 3, 3, 3, 3] becomes [3, 5]";
        assertEquals(testArr3Result, App.encodeRunLength(testArr3));

        // Test with alternating elements
        int[] testArr4 = {1, 2, 1, 2, 1, 2};
        String testArr4Result = "[1, 2, 1, 2, 1, 2] becomes [1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1]";
        assertEquals(testArr4Result, App.encodeRunLength(testArr4));

        // Test with a sequence of two elements repeating with different counts
        int[] testArr5 = {4, 4, 4, 5, 5, 5, 5};
        String testArr5Result = "[4, 4, 4, 5, 5, 5, 5] becomes [4, 3, 5, 4]";
        assertEquals(testArr5Result, App.encodeRunLength(testArr5));

        // Test with consecutive runs of increasing and decreasing values
        int[] testArr6 = {9, 9, 1, 1, 1, 8, 8, 8, 8, 2, 2};
        String testArr6Result = "[9, 9, 1, 1, 1, 8, 8, 8, 8, 2, 2] becomes [9, 2, 1, 3, 8, 4, 2, 2]";
        assertEquals(testArr6Result, App.encodeRunLength(testArr6));

        // Edge case: Test with maximum integer values
        int[] testArr7 = {Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 7, 7};
        String testArr7Result = "[2147483647, 2147483647, 2147483647, 7, 7] becomes [2147483647, 3, 7, 2]";
        assertEquals(testArr7Result, App.encodeRunLength(testArr7));

        // Edge case: Test with minimum integer values
        int[] testArr8 = {Integer.MIN_VALUE, Integer.MIN_VALUE, 0, 0, 0};
        String testArr8Result = "[-2147483648, -2147483648, 0, 0, 0] becomes [-2147483648, 2, 0, 3]";
        assertEquals(testArr8Result, App.encodeRunLength(testArr8));

        // Edge case: Test with a large number of elements (stress test)
        int[] testArr9 = new int[1000];
        Arrays.fill(testArr9, 1);
        StringBuilder testArr9Result = new StringBuilder("[");
        for (int i = 0; i < testArr9.length; i++) {
            testArr9Result.append("1, ");
        }
        testArr9Result.setLength(testArr9Result.length() - 2); // Remove last comma and space
        testArr9Result.append("] becomes [1, 1000]");
        assertEquals(testArr9Result.toString(), App.encodeRunLength(testArr9));

        // Edge case: Mixed sequence with repeated elements interspersed
        int[] testArr10 = {2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7};
        String testArr10Result = "[2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7] becomes [2, 2, 3, 1, 4, 3, 5, 2, 6, 3, 7, 1]";
        assertEquals(testArr10Result, App.encodeRunLength(testArr10));
    }

}
