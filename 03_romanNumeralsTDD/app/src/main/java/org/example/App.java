/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.HashMap;

public class App {

    public static String getHardcodedRomanSymbol(int arabNumber)
    {
        HashMap<Integer, String> romanSymbol = new HashMap<Integer, String>();
        romanSymbol.put(10000, "None");
        romanSymbol.put(1000, "M");
        romanSymbol.put(500, "D");
        romanSymbol.put(100, "C");
        romanSymbol.put(50, "L");
        romanSymbol.put(10, "X");
        romanSymbol.put(5, "V");
        romanSymbol.put(1, "I");

        return romanSymbol.get(arabNumber);
    }

    public static String getRomanNumeralByLimits(int arabNumber, int lowerLimit, int upperLimit)
    {
        StringBuilder str = new StringBuilder();

        String upperLimitSymbol = getHardcodedRomanSymbol(upperLimit);
        int median = upperLimit/2;
        String medianSymbol = getHardcodedRomanSymbol(median);
        String lowerLimitSymbol = getHardcodedRomanSymbol(lowerLimit);
        
        if (lowerLimit == 1000)
        {
            while(arabNumber >= lowerLimit)
            {
                str.append(lowerLimitSymbol);
                arabNumber = arabNumber - lowerLimit;
            }
        }
        else if (upperLimit - arabNumber == lowerLimit)
        {
            str.append(lowerLimitSymbol);
            str.append(upperLimitSymbol);
        }
        else if (arabNumber - median >= 0)
        {
            str.append(medianSymbol);
            str.append(getRomanNumeralByLimits(arabNumber - median, lowerLimit, upperLimit));
        }
        else if (median - arabNumber == lowerLimit)
        {
            str.append(lowerLimitSymbol);
            str.append(medianSymbol);
        }
        else
        {
            while(arabNumber >= lowerLimit)
            {
                str.append(lowerLimitSymbol);
                arabNumber = arabNumber - lowerLimit;
            }
        }
        return str.toString();
    }

    public static String toRomanNumeral(int arabNumber) {
        StringBuilder str = new StringBuilder();

        if (arabNumber > 3999)
        {
            return "Number exceeds limit";
        }

        int thousands = (int) Math.floor(arabNumber/1000) * 1000;
        int hundreds = (int) Math.floor((arabNumber - thousands)/100) * 100;
        int tens = (int) Math.floor((arabNumber - thousands- hundreds)/10) * 10;
        int ones = arabNumber - thousands - hundreds - tens;
        
        str.append(getRomanNumeralByLimits(thousands, 1000, 10000));
        str.append(getRomanNumeralByLimits(hundreds, 100, 1000));
        str.append(getRomanNumeralByLimits(tens, 10, 100));
        str.append(getRomanNumeralByLimits(ones, 1, 10));
        return str.toString();
    }

    public static void main(String[] args) {
        String ergebnis = toRomanNumeral(10);
        System.out.println(ergebnis);
    }
}
